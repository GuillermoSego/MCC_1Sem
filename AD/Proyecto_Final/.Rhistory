contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos del problema
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 1000000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Datos del problema
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 100000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
datos <- read.csv("datos_abiertos_2023_05.csv")
datos <- read.csv("datos_abiertos_2023_05.csv")
getwd()
datos <- read.csv("Users/guillermo_sego/Desktop/MCC/PA/Proyecto Final/datos_abiertos_2023_05.csv")
datos <- read.csv("Users/guillermo_sego/Escritorio/MCC/PA/Proyecto Final/datos_abiertos_2023_05.csv")
datos <- read.csv("Users/guillermo_sego/Escritorio/MCC/PA/Proyecto Final/datos_abiertos_2023_05.csv")
getwd()
ls
setwd("/Users/guillermo_sego/Escritorio")
setwd("/Users/guillermo_sego/Desktop")
getwd()
setwd("/Users/guillermo_sego/Desktop/MCC/PA")
setwd("/Users/guillermo_sego/Desktop/MCC/PA/Proyecto Final")
setwd("/Users/guillermo_sego/Desktop/MCC/PA/'Proyecto Final'")
setwd("/Users/guillermo_sego/Desktop/MCC/PA/Proyecto_Final")
setwd("/Users/guillermo_sego/Desktop/MCC/PA/Proyecto_Final/")
getwd()
setwd("/Users/guillermo_sego/Desktop/MCC/AD/Proyecto_Final/")
getwd()
datos <- read.csv("datos_abiertos_2023_05.csv")
datos <- read.csv("datos_abiertos_2023_05.csv")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
View(datos)
library(readr)
datos <- read_csv("datos_abiertos_2023_05.csv")
library(readr)
datos <- read_csv("datos_abiertos_2023_05.csv")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
datos
str(datos)
summary(datos)
str(datos)
summary(datos)
datos <- na.omit(datos)
datos <- na.omit(datos)
length(datos)
datos <- na.omit(datos)
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
str(datos)
summary(datos)
datos <- na.omit(datos)
datos <- na.omit(datos)
str(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
# Convertir a formato de fecha
datos$Inicio_del_viaje <- as.Date(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S")
datos$Fin_del_viaje <- as.Date(datos$Fin_del_viaje, format="%Y-%m-%d %H:%M:%S")
# Convertir a factor las variables categóricas
datos$Genero <- as.factor(datos$Genero)
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
# Convertir a factor las variables categóricas
datos$Genero <- as.factor(datos$Genero)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
# Puedes decidir eliminarlos o tratarlos de alguna manera
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
library(ggplot2)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
stat_bin(datos)
stat_bin()
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Convertir 'Inicio_del_viaje' a formato de fecha y extraer el día de la semana
datos$Dia_de_la_semana <- weekdays(as.Date(datos$Inicio_del_viaje))
ggplot(datos, aes(x=Dia_de_la_semana)) +
geom_bar(fill="purple") +
labs(title="Uso del Sistema Mibici por Día de la Semana", x="Día de la Semana", y="Número de Viajes")
# Crear una nueva columna para rangos de edad
datos$Rango_edad <- cut(as.numeric(format(Sys.Date(), "%Y")) - datos$Año_nacimiento,
breaks=c(0, 18, 30, 40, 50, 60, Inf),
labels=c("<=18", "19-30", "31-40", "41-50", "51-60", "60+"))
ggplot(datos, aes(x=Rango_edad)) +
geom_bar(fill="orange") +
labs(title="Uso del Sistema Mibici por Rango de Edad", x="Rango de Edad", y="Número de Viajes")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
str(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
# Convertir a formato de fecha
datos$Inicio_del_viaje <- as.Date(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S")
datos$Fin_del_viaje <- as.Date(datos$Fin_del_viaje, format="%Y-%m-%d %H:%M:%S")
# Convertir a factor las variables categóricas
datos$Genero <- as.factor(datos$Genero)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
# Puedes decidir eliminarlos o tratarlos de alguna manera
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
library(ggplot2)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Convertir 'Inicio_del_viaje' a formato de fecha y extraer el día de la semana
datos$Dia_de_la_semana <- weekdays(as.Date(datos$Inicio_del_viaje))
ggplot(datos, aes(x=Dia_de_la_semana)) +
geom_bar(fill="purple") +
labs(title="Uso del Sistema Mibici por Día de la Semana", x="Día de la Semana", y="Número de Viajes")
# Crear una nueva columna para rangos de edad
datos$Rango_edad <- cut(as.numeric(format(Sys.Date(), "%Y")) - datos$Año_nacimiento,
breaks=c(0, 18, 30, 40, 50, 60, Inf),
labels=c("<=18", "19-30", "31-40", "41-50", "51-60", "60+"))
ggplot(datos, aes(x=Rango_edad)) +
geom_bar(fill="orange") +
labs(title="Uso del Sistema Mibici por Rango de Edad", x="Rango de Edad", y="Número de Viajes")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
str(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
# Convertir a formato de fecha
datos$Inicio_del_viaje <- as.Date(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S")
datos$Fin_del_viaje <- as.Date(datos$Fin_del_viaje, format="%Y-%m-%d %H:%M:%S")
# Convertir a factor las variables categóricas
datos$Genero <- as.factor(datos$Genero)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
# Puedes decidir eliminarlos o tratarlos de alguna manera
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
library(ggplot2)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Convertir 'Inicio_del_viaje' a formato de fecha y extraer el día de la semana
datos$Dia_de_la_semana <- weekdays(as.Date(datos$Inicio_del_viaje))
ggplot(datos, aes(x=Dia_de_la_semana)) +
geom_bar(fill="purple") +
labs(title="Uso del Sistema Mibici por Día de la Semana", x="Día de la Semana", y="Número de Viajes")
# Crear una nueva columna para rangos de edad
datos$Rango_edad <- cut(as.numeric(format(Sys.Date(), "%Y")) - datos$Año_nacimiento,
breaks=c(0, 18, 30, 40, 50, 60, Inf),
labels=c("<=18", "19-30", "31-40", "41-50", "51-60", "60+"))
ggplot(datos, aes(x=Rango_edad)) +
geom_bar(fill="orange") +
labs(title="Uso del Sistema Mibici por Rango de Edad", x="Rango de Edad", y="Número de Viajes")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Convertir 'Inicio_del_viaje' a formato de fecha y extraer el día de la semana
datos$Dia_de_la_semana <- weekdays(as.Date(datos$Inicio_del_viaje))
ggplot(datos, aes(x=Dia_de_la_semana)) +
geom_bar(fill="purple") +
labs(title="Uso del Sistema Mibici por Día de la Semana", x="Día de la Semana", y="Número de Viajes")
# Crear una nueva columna para rangos de edad
datos$Rango_edad <- cut(as.numeric(format(Sys.Date(), "%Y")) - datos$Año_nacimiento,
breaks=c(0, 18, 30, 40, 50, 60, Inf),
labels=c("<=18", "19-30", "31-40", "41-50", "51-60", "60+"))
ggplot(datos, aes(x=Rango_edad)) +
geom_bar(fill="orange") +
labs(title="Uso del Sistema Mibici por Rango de Edad", x="Rango de Edad", y="Número de Viajes")
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
datos <- na.omit(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
# Convertir a formato de fecha
datos$Inicio_del_viaje <- as.Date(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S")
datos$Fin_del_viaje <- as.Date(datos$Fin_del_viaje, format="%Y-%m-%d %H:%M:%S")
# Convertir a factor las variables categóricas
datos$Genero <- as.factor(datos$Genero)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
# Puedes decidir eliminarlos o tratarlos de alguna manera
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S"), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_bar(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
str(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
# Convertir a formato de fecha
datos$Inicio_del_viaje <- as.Date(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S")
datos$Fin_del_viaje <- as.Date(datos$Fin_del_viaje, format="%Y-%m-%d %H:%M:%S")
# Convertir a factor las variables categóricas
datos$Genero <- as.factor(datos$Genero)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
# Puedes decidir eliminarlos o tratarlos de alguna manera
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
datos
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
str(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
# Puedes decidir eliminarlos o tratarlos de alguna manera
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_histogram(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Primero, extrae la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S"), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_bar(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Convertir 'Inicio_del_viaje' a formato de fecha y extraer el día de la semana
datos$Dia_de_la_semana <- weekdays(as.Date(datos$Inicio_del_viaje))
ggplot(datos, aes(x=Dia_de_la_semana)) +
geom_bar(fill="purple") +
labs(title="Uso del Sistema Mibici por Día de la Semana", x="Día de la Semana", y="Número de Viajes")
# Crear una nueva columna para rangos de edad
datos$Rango_edad <- cut(as.numeric(format(Sys.Date(), "%Y")) - datos$Año_nacimiento,
breaks=c(0, 18, 30, 40, 50, 60, Inf),
labels=c("<=18", "19-30", "31-40", "41-50", "51-60", "60+"))
ggplot(datos, aes(x=Rango_edad)) +
geom_bar(fill="orange") +
labs(title="Uso del Sistema Mibici por Rango de Edad", x="Rango de Edad", y="Número de Viajes")
datos <- read.csv("datos_abiertos_2023_05.csv", fileEncoding = "UTF-8")
str(datos)
summary(datos)
datos <- na.omit(datos)
summary(datos)
boxplot(datos$Año_nacimiento)
# Identificar valores atípicos y eliminarlos
outliers <- boxplot.stats(datos$Año_nacimiento)$out
datos <- datos[!datos$Año_nacimiento %in% outliers,]
boxplot(datos$Año_nacimiento)
head(datos)
str(datos)
library(ggplot)
library(ggplot)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
library(ggplot2)
ggplot(datos, aes(x=Genero)) +
geom_bar(fill="steelblue") +
labs(title="Uso del Sistema Mibici por Género", x="Género", y="Número de Viajes")
ggplot(datos, aes(x=Año_nacimiento)) +
geom_histogram(binwidth=1, fill="coral") +
labs(title="Distribución de Edades de los Usuarios", x="Año de Nacimiento", y="Frecuencia")
# Extraer la hora del día de la columna 'Inicio_del_viaje'
datos$Hora_del_dia <- format(as.POSIXct(datos$Inicio_del_viaje, format="%Y-%m-%d %H:%M:%S"), "%H")
ggplot(datos, aes(x=Hora_del_dia)) +
geom_bar(stat="count", fill="lightgreen") +
labs(title="Uso del Sistema Mibici por Hora del Día", x="Hora del Día", y="Número de Viajes")
# Convertir 'Inicio_del_viaje' a formato de fecha y extraer el día de la semana
datos$Dia_de_la_semana <- weekdays(as.Date(datos$Inicio_del_viaje))
ggplot(datos, aes(x=Dia_de_la_semana)) +
geom_bar(fill="purple") +
labs(title="Uso del Sistema Mibici por Día de la Semana", x="Día de la Semana", y="Número de Viajes")
# Crear una nueva columna para rangos de edad
datos$Rango_edad <- cut(as.numeric(format(Sys.Date(), "%Y")) - datos$Año_nacimiento,
breaks=c(0, 18, 30, 40, 50, 60, Inf),
labels=c("<=18", "19-30", "31-40", "41-50", "51-60", "60+"))
ggplot(datos, aes(x=Rango_edad)) +
geom_bar(fill="orange") +
labs(title="Uso del Sistema Mibici por Rango de Edad", x="Rango de Edad", y="Número de Viajes")
