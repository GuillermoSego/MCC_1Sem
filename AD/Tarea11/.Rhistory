# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
valor_p
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
valor_p
datos combinados
datos_combinados
datos_permutados[1:length(americano_nativo)]
datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
clean
clc
c
source("~/Desktop/MCC/AD/Tarea10/T10_P8.R")
valor_p
datos_permutados
print("El valor calculado de p para %d permutaciones es: %lf", n_permutaciones, valor_p)
source("~/Desktop/MCC/AD/Tarea10/T10_P8.R")
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos originales
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 10000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
# Datos del problema
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 1000000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Datos del problema
americano_nativo <- c(8.50, 9.48, 8.65, 8.16, 8.83, 7.76, 8.63)
caucasiano <- c(8.27, 8.20, 8.25, 8.14, 9.00, 8.10, 7.20, 8.32, 7.70)
# Calcular la diferencia absoluta de las medianas originales
diferencia_mediana_original <- abs(median(americano_nativo) - median(caucasiano))
# Combinar los datos
datos_combinados <- c(americano_nativo, caucasiano)
# Número de permutaciones
n_permutaciones <- 100000
contador <- 0
# Realizar permutaciones
for (i in 1:n_permutaciones) {
datos_permutados <- sample(datos_combinados)
grupo1 <- datos_permutados[1:length(americano_nativo)]
grupo2 <- datos_permutados[(length(americano_nativo) + 1):length(datos_combinados)]
diferencia_mediana_permutada <- abs(median(grupo1) - median(grupo2))
if (diferencia_mediana_permutada >= diferencia_mediana_original) {
contador <- contador + 1
}
}
# Calcular el valor p
valor_p <- contador / n_permutaciones
# Imprimir el valor p
sprintf("El valor calculado de p para %d permutaciones es: %f", n_permutaciones, valor_p)
plot(cars)
reticulate::repl_python()
datos <- read.csv("datos(1).csv")
setwd()
getwd()
setwd(Users/guillermo_sego/Desktop/MCC/AD/Tarea11)
setwd(/Users/guillermo_sego/Desktop/MCC/AD/Tarea11)
setwd("/Users/guillermo_sego/Desktop/MCC/AD/Tarea11")
getwd()
datos <- read.csv("datos(1).csv")
datos <- read.csv("datos(1).csv")
getwd()
datos
# Ajustar el modelo de regresión lineal
modelo <- lm(vote ~ growth, data = datos)
datos
names(datos)
datos <- read.csv("datos(1).csv", sep = "\t")
datos
datos <- read.delim("datos(1).csv")
datos
datos <- read.csv("datos(1).csv", sep = ";")
datos
datos <- read.csv("datos(1).csv", sep = "\t")
datos
datos <- read.delim("datos(1).csv")
datos <- read.delim("datos(1).csv")
datos
datos <- read.csv("datos(1).csv", sep = " ")
datos
datos <- read.csv("datos(1).csv", sep = " ")
datos
# Ajustar el modelo de regresión lineal
modelo <- lm(vote ~ growth, data = datos)
# Resumen del modelo para ver los coeficientes
summary(modelo)
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
# Ajustar el modelo de regresión lineal
modelo <- lm(vote ~ growth, data = datos)
# Resumen del modelo para ver los coeficientes
summary(modelo)
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
# Gráfico de dispersión
plot(datos$growth, datos$vote, main = "Crecimiento Económico vs Porcentaje de Votos",
xlab = "Crecimiento Económico (%)", ylab = "Porcentaje de Votos (%)", pch = 19)
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
# Añadir la línea de regresión al gráfico
abline(modelo, col = "red")
# Gráfico de dispersión
plot(datos$growth, datos$vote, main = "Crecimiento Económico vs Porcentaje de Votos",
xlab = "Crecimiento Económico (%)", ylab = "Porcentaje de Votos (%)", pch = 19)
# Añadir la línea de regresión al gráfico
abline(modelo, col = "red")
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
datos2 <- read.csv("datos2(1).csv", sep = " ")
datos2
datos2 <- read.csv("datos2(1).csv")
datos2
# Convertir 'race' en factor y luego en variables dummy
datos2$race <- factor(datos2$race)
datos2 <- cbind(datos2, model.matrix(~race - 1, data = datos2))
# Convertir 'race' en factor y luego en variables dummy
datos2$race <- factor(datos2$race)
datos2 <- cbind(datos2, model.matrix(~race - 1, data = datos2))
# Histogramas y Diagramas de Caja
hist(datos2$age)
boxplot(datos2$lwt)
# Gráficos de Dispersión
plot(datos2$lwt, datos2$bwt)
# Diagramas de Barras para Variables Categóricas
barplot(table(datos2$smoke, datos2$bwt))
# Ajuste del Modelo de Regresión Lineal
modelo <- lm(bwt ~ ., data = datos2)
datos2
datos2 <- read.csv("datos2(1).csv")
datos2
datos2
# Convertir 'race' en factor y luego en variables dummy
datos2$race <- factor(datos2$race)
datos2 <- cbind(datos2, model.matrix(~race - 1, data = datos2))
datos2
# Histogramas y Diagramas de Caja
hist(datos2$age)
boxplot(datos2$lwt)
# Gráficos de Dispersión
plot(datos2$lwt, datos2$bwt)
# Diagramas de Barras para Variables Categóricas
barplot(table(datos2$smoke, datos2$bwt))
# Gráfico de pares para variables seleccionadas
pairs(~ bwt + age + lwt + ftv, data = datos2, main = "Gráficos de Pares")
# Diagramas de caja para variables categóricas
par(mfrow = c(2, 3)) # Ajustar el layout para múltiples gráficos
boxplot(bwt ~ smoke, data = datos2, main = "Peso del Bebé vs Fumar")
boxplot(bwt ~ ptd, data = datos2, main = "Peso del Bebé vs Prematuros")
boxplot(bwt ~ ht, data = datos2, main = "Peso del Bebé vs Hipertensión")
boxplot(bwt ~ ui, data = datos2, main = "Peso del Bebé vs Irritabilidad Uterina")
boxplot(bwt ~ race, data = datos2, main = "Peso del Bebé vs Raza")
# Calcular la matriz de correlación
cor_matriz <- cor(datos2[, sapply(datos2, is.numeric)])
# Visualizar la matriz de correlación como un mapa de calor
library(ggplot2)
ggplot(data = melt(cor_matriz), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlación") +
theme_minimal() +
coord_fixed()
install.packages("reshape2")
# Calcular la matriz de correlación
cor_matriz <- cor(datos2[, sapply(datos2, is.numeric)])
# Visualizar la matriz de correlación como un mapa de calor
library(ggplot2)
library(reshape2)
ggplot(data = melt(cor_matriz), aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Correlación") +
theme_minimal() +
coord_fixed()
# Cargar la librería necesaria para gráficos avanzados
library(GGally)
install.packages("GGally")
# Cargar la librería necesaria para gráficos avanzados
library(GGally)
# Ajustar el gráfico de pares con GGally
ggpairs(datos2, columns = c("bwt", "age", "lwt", "ftv"),
ggplot2::aes(colour = factor(smoke)),
title = "Gráficos de Pares Mejorados",
upper = list(continuous = "smooth", params = list(method = "lm")),
lower = list(continuous = "points"))
datos <- read.csv("datos(1).csv", sep = " ")
datos
# Ajustar el modelo de regresión lineal
modelo <- lm(vote ~ growth, data = datos)
# Resumen del modelo para ver los coeficientes
summary(modelo)
# Gráfico de dispersión
plot(datos$growth, datos$vote, main = "Crecimiento Económico vs Porcentaje de Votos",
xlab = "Crecimiento Económico (%)", ylab = "Porcentaje de Votos (%)", pch = 19)
# Añadir la línea de regresión al gráfico
abline(modelo, col = "red")
# Hacer una predicción
prediccion <- predict(modelo, newdata = data.frame(growth = 2))
# Imprimir la predicción
print(prediccion)
datos2 <- read.csv("datos2(1).csv")
datos2
# Convertir 'race' en factor y luego en variables dummy
datos2$race <- factor(datos2$race)
datos2 <- cbind(datos2, model.matrix(~race - 1, data = datos2))
# Cargar la librería necesaria para gráficos avanzados
library(GGally)
# Ajustar el gráfico de pares con GGally
ggpairs(datos2, columns = c("bwt", "age", "lwt", "ftv"),
ggplot2::aes(colour = factor(smoke)),
title = "Gráficos de Pares Mejorados",
upper = list(continuous = "smooth", params = list(method = "lm")),
lower = list(continuous = "points"))
# Gráfico de pares para variables seleccionadas
pairs(~ bwt + age + lwt + ftv, data = datos2, main = "Gráficos de Pares")
# Ajuste del Modelo de Regresión Lineal
modelo1 <- lm(bwt ~ ui + smoke, data = datos2)
summary(modelo1)
# Diagnósticos del Modelo
plot(modelo1)
summary(modelo1)
names(data1)
names(datos1)
names(datos2)
# Ajuste del Modelo de Regresión Lineal
modelo1 <- lm(bwt ~ ui + smoke + ptd + ht, data = datos2)
# Ajuste del Modelo de Regresión Lineal
modelo1 <- lm(bwt ~ ui + smoke + ptd + ht, data = datos2)
summary(modelo1)
# Ajuste del Modelo de Regresión Lineal
modelo1 <- lm(bwt ~ ui + smoke, data = datos2)
summary(modelo1)
# Ajuste del Modelo de Regresión Lineal
modelo2 <- lm(bwt ~ ui + smoke + ptd + ht, data = datos2)
# Ajuste del Modelo de Regresión Lineal
modelo2 <- lm(bwt ~ ui + smoke + ptd + ht, data = datos2)
summary(modelo2)
# Ajuste del Modelo de Regresión Lineal
modelo2 <- lm(bwt ~ ui + smoke + ptd + ht, data = datos2)
summary(modelo2)
mediciones_6_anos <- c(7.53, 7.70, 7.46, 8.21, 7.81, 8.01, 7.72, 7.13, 7.68, 7.66, 8.11, 7.20, 7.25, 7.79)
# 1. Calcular la diferencia entre las mediciones
diferencias <- mediciones_6_anos - mediciones_5_anos
# Datos de las mediciones a los 5 y 6 años
mediciones_5 <- c(7.33, 7.49, 7.27, 7.93, 7.56, 7.81, 7.46, 6.94, 7.49, 7.44, 7.95, 7.04, 7.10, 7.64)
mediciones_6 <- c(7.53, 7.70, 7.46, 8.21, 7.81, 8.01, 7.72, 7.13, 7.68, 7.66, 8.11, 7.20, 7.25, 7.79)
# 1. Calcular la diferencia entre las mediciones
diferencias <- mediciones_6 - mediciones_5
# 3. Realizar la prueba t para muestras emparejadas
t_test_result <- t.test(diferencias, mu = 0.2, alternative = "two.sided", conf.level = 0.9)
# 4. Decidir si rechazar o no la hipótesis nula
t_test_result
# Realizar la prueba t para muestras emparejadas
t_test_result <- t.test(diferencias, mu = 0.2, alternative = "two.sided", conf.level = 0.9)
# Decidir si rechazar o no la hipótesis nula
t_test_result
# Cargar las librerías necesarias
library(ggplot2)
library(class) # para KNN
# Definir el número de muestras y el tamaño de cada muestra
n_muestras <- 1000
n <- 30
# Inicializar un vector para almacenar los valores de Y_hat(10)
y_hat_10 <- numeric(n_muestras)
# Bucle para generar muestras y calcular Y_hat(10)
set.seed(123) # Para reproducibilidad
for (i in 1:n_muestras) {
x <- 2:(n + 1) # x_i
beta_real <- 1 # Valor real de beta
epsilon <- rnorm(n, mean = 0, sd = sqrt(0.1 * x))
y <- 1 + beta_real * log(x) + epsilon
# Estimar beta
beta_estimado <- sum((y - 1) * log(x) / x) / sum(log(x)^2 / x)
# Calcular Y_hat(10)
y_hat_10[i] <- 1 + beta_estimado * log(10)
}
# Visualizar la distribución de Y_hat(10)
ggplot(data.frame(y_hat_10), aes(x = y_hat_10)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribución de Y_hat(10)", x = "Y_hat(10)", y = "Frecuencia")
# Comparación con 1-KNN
knn_pred <- numeric(n_muestras)
for (i in 1:n_muestras) {
x <- 2:(n + 1)
y <- 1 + beta_real * log(x) + rnorm(n, mean = 0, sd = sqrt(0.1 * x))
knn_pred[i] <- knn.reg(train = data.frame(x), test = data.frame(x = 10), y = y, k = 1)$pred
}
install.packages("FNN")
# Visualizar la distribución de las predicciones de 1-KNN
ggplot(data.frame(knn_pred), aes(x = knn_pred)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Distribución de Predicciones 1-KNN para Y(10)", x = "Y(10)", y = "Frecuencia")
# Cargar las librerías necesarias
library(ggplot2)
library(class) # para KNN
library(FNN)
# Definir el número de muestras y el tamaño de cada muestra
n_muestras <- 1000
n <- 30
# Inicializar un vector para almacenar los valores de Y_hat(10)
y_hat_10 <- numeric(n_muestras)
# Bucle para generar muestras y calcular Y_hat(10)
set.seed(123) # Para reproducibilidad
for (i in 1:n_muestras) {
x <- 2:(n + 1) # x_i
beta_real <- 1 # Valor real de beta
epsilon <- rnorm(n, mean = 0, sd = sqrt(0.1 * x))
y <- 1 + beta_real * log(x) + epsilon
# Estimar beta
beta_estimado <- sum((y - 1) * log(x) / x) / sum(log(x)^2 / x)
# Calcular Y_hat(10)
y_hat_10[i] <- 1 + beta_estimado * log(10)
}
# Visualizar la distribución de Y_hat(10)
ggplot(data.frame(y_hat_10), aes(x = y_hat_10)) +
geom_histogram(bins = 30, fill = "blue", alpha = 0.7) +
labs(title = "Distribución de Y_hat(10)", x = "Y_hat(10)", y = "Frecuencia")
# Comparación con 1-KNN
knn_pred <- numeric(n_muestras)
for (i in 1:n_muestras) {
x <- 2:(n + 1)
y <- 1 + beta_real * log(x) + rnorm(n, mean = 0, sd = sqrt(0.1 * x))
knn_pred[i] <- knn.reg(train = data.frame(x), test = data.frame(x = 10), y = y, k = 1)$pred
}
# Visualizar la distribución de las predicciones de 1-KNN
ggplot(data.frame(knn_pred), aes(x = knn_pred)) +
geom_histogram(bins = 30, fill = "red", alpha = 0.7) +
labs(title = "Distribución de Predicciones 1-KNN para Y(10)", x = "Y(10)", y = "Frecuencia")
